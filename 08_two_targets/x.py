from pwn import * 

#context.log_level = 'debug'

check = [  0x11, 0xDE, 0xCF, 0x10, 0xDF, 0x75, 0xBB,
           0xA5, 0x43, 0x1E, 0x9D, 0xC2, 0xE3, 0xBF,
           0xF5, 0xD6, 0x96, 0x7F, 0xBE, 0xB0, 0xBF,
           0xB7, 0x96, 0x1D, 0xA8, 0xBB, 0x0A, 0xD9, 
           0xBF, 0xC9, 0x0D, 0xFF]

mainxor = [0x55, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xEC, 
           0x50, 0x64, 0x48, 0x8B, 0x04, 0x25, 0x28, 
           0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xF8,
           0x31, 0xC0, 0xE8, 0x24, 0xFE, 0xFF, 0xFF,
           0x48, 0x8D, 0x45, 0xC0]


main_hexed = [hex(i)[2:].rjust(2,'0') for i in mainxor]
main_bytes = [bytes.fromhex(i) for i in main_hexed]

check_hexed = [hex(i)[2:].rjust(2,'0') for i in check]
check_bytes = [bytes.fromhex(i) for i in check_hexed]

solution = [xor(i, j) for i, j in zip(main_bytes, check_bytes)]

solution = [bytes.fromhex(i.hex()[::-1]) for i in solution]
solution = b''.join(solution)
print(solution)
e = ELF('./challenge')
#p = process(e.path)
p = remote('svc.pwnable.xyz',30031)
p.recvuntil(b'> ')
p.sendline(b'1')
p.recvuntil(b'name: ')
p.send(solution)
p.recvuntil(b'> ')
p.sendline(b'4')
p.interactive()
